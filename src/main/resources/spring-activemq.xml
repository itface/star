<beans  
        xmlns="http://www.springframework.org/schema/beans"  
        xmlns:amq="http://activemq.apache.org/schema/core"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd 
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">
        
    <!--  embedded ActiveMQ Broker,内置的ActiveMq服务器 -->  
	<amq:broker useJmx="false" persistent="true" brokerName="sg">  
	    <amq:persistenceAdapter>  
	        <amq:jdbcPersistenceAdapter id="jdbcAdapter" dataSource="#dataSource" createTablesOnStartup="true" useDatabaseLock="false"/>
		</amq:persistenceAdapter>  
		<!-- 开发给外部的链接使用tcp方式 -->  
	    <amq:transportConnectors>  
	        <!-- 默认为61616 -->
	        <amq:transportConnector uri="tcp://localhost:61616"/>   
	    </amq:transportConnectors>  
	</amq:broker>  
	
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->  
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="sessionTransacted" value="true"/>
        <property name="sessionAcknowledgeModeName" value="CLIENT_ACKNOWLEDGE"/>
        <!-- 消息应答方式  
        Session.AUTO_ACKNOWLEDGE  消息自动签收  
        Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收  
        Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送  
        -->
        <!-- property name="sessionAcknowledgeMode" value="1" /-->  
        <!-- 发送模式  DeliveryMode.NON_PERSISTENT=1:非持久 ; DeliveryMode.PERSISTENT=2:持久-->
        <!-- property name="deliveryMode" value="2" /-->
    </bean>  
    
    <!--amq:connectionFactory id="targetConnectionFactory" brokerURL="vm://localhost"/-->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">  
	    <property name="connectionFactory" ref="targetConnectionFactory"/>  
	    <property name="maxConnections" value="10"/>  
	</bean>
    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->  
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
        <property name="brokerURL" value="tcp://localhost:61616"/>  
    </bean>  
      
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->  
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">  
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>  
    </bean>  
      
    <!--这个是队列目的地，可以定义多个ActiveMQQueue bean-->  
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>queue</value>  
        </constructor-arg>  
    </bean>  
    <!--这个是主题目的地，一对多的-->  
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">  
	    <constructor-arg value="topic"/>  
	</bean>  
	<bean id="invokeMessageConverter" class="com.sapGarden.system.activemq.InvokeMessageConverter"/>
	<!-- POJO which send Message uses  Spring JmsTemplate -->  
	<bean id="invokeMessageProducer" class="com.sapGarden.system.activemq.InvokeMessageProducer">  
	    <property name="template" ref="jmsTemplate"/>  
	    <property name="destination" ref="queueDestination"/>  
	</bean>
	<bean id="test" class="com.sapGarden.system.activemq.Test">  
	    <property name="invokeMessageProducer" ref="invokeMessageProducer"/>
	</bean>
    <!-- 消息监听适配器 -->
    <bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">  
	    <constructor-arg>  
	        <bean class="com.sapGarden.system.activemq.InvokeMessageConsumer">  
	        </bean>  
	    </constructor-arg>  
	    <!--  may be other method -->  
	    <property name="defaultListenerMethod" value="printMyOut"/>  
	    <!-- custom MessageConverter define -->  
	    <property name="messageConverter" ref="invokeMessageConverter"/>  
	</bean> 
    <!-- 消息监听容器 -->  
    <bean id="jmsContainer"  class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="connectionFactory" />  
        <property name="destination" ref="queueDestination" />  
        <property name="messageListener" ref="messageListenerAdapter" />  
    </bean>
</beans>