<beans  
        xmlns="http://www.springframework.org/schema/beans"  
        xmlns:amq="http://activemq.apache.org/schema/core"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.7.0.xsd">
 <!--   
推荐版本，使用spring的listenerContainer，消息用数据库持久化保存，服务器重启不会丢失  
http://activemq.apache.org/spring-support.html  
-->  
<!--  embedded ActiveMQ Broker,内置的ActiveMq服务器 -->  
<amq:broker useJmx="false" persistent="true">  
    <amq:persistenceAdapter>  
        <amq:jdbcPersistenceAdapter id="jdbcAdapter" dataSource="#dataSource" createTablesOnStartup="true" useDatabaseLock="false"/>
	</amq:persistenceAdapter>  
	<!-- 开发给外部的链接使用tcp方式 -->  
    <amq:transportConnectors>  
        <!-- 默认为61616 -->
        <amq:transportConnector uri="tcp://localhost:61616"/>   
    </amq:transportConnectors>  
</amq:broker>  
<amq:connectionFactory id="jmsConnectionFactory" brokerURL="vm://localhost"/>
<!--  ActiveMQ connectionFactory  -->  
<!--bean id="jmsConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
  <property name="connectionFactory">
    <bean class="org.apache.activemq.ActiveMQConnectionFactory">
      <property name="brokerURL" value="vm://localhost:61616"/>
    </bean>
  </property>
</bean-->
<!-- 定义主题 -->  
<!--bean id="myTopic"  class="org.apache.activemq.command.ActiveMQTopic">  
  <constructor-arg value="normandy.topic"/>  
</bean-->  
<!--amq:connectionFactory id="jmsConnectionFactory" brokerURL="vm://localhost"/-->
<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
    <property name="connectionFactory">  
        <!--  lets wrap in a pool to avoid creating a connection per send -->  
        <bean class="org.springframework.jms.connection.SingleConnectionFactory">  
            <property name="targetConnectionFactory" ref="jmsConnectionFactory"/>  
        </bean>  
    </property>  
    <!-- custom MessageConverter -->  
    <property name="messageConverter" ref="invokeMessageConverter"/> 
    <!--property name="pubSubDomain" value="true"/>
    <property name="defaultDestination" ref="myTopic"/-->
</bean>  
<!--  ActiveMQ destinations，队列名称  -->  
<amq:queue name="destination" physicalName="org.apache.activemq.spring.Test.spring.embedded"/>
<!-- 发送消息的目标地（一个队列） -->
<bean id="errqueue" class="org.apache.activemq.command.ActiveMQQueue">   
	<constructor-arg index="0">   
	<!-- 设置消息队列的名字 -->
    	<value>tomcatqueue</value>   
	</constructor-arg>   
</bean>
<bean id="invokeMessageConverter" class="com.sapGarden.system.activemq.InvokeMessageConverter"/>
<!-- POJO which send Message uses  Spring JmsTemplate -->  
<bean id="invokeMessageProducer" class="com.sapGarden.system.activemq.InvokeMessageProducer">  
    <property name="template" ref="jmsTemplate"/>  
    <property name="destination" ref="destination"/>  
</bean>
<bean id="test" class="com.sapGarden.system.activemq.Test">  
    <property name="invokeMessageProducer" ref="invokeMessageProducer"/>
</bean>
<!--  Message Driven POJO (MDP) -->  
<bean id="messageListener" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">  
    <constructor-arg>  
        <bean class="com.sapGarden.system.activemq.InvokeMessageConsumer">  
        </bean>  
    </constructor-arg>  
    <!--  may be other method -->  
    <property name="defaultListenerMethod" value="printMyOut"/>  
    <!-- custom MessageConverter define -->  
    <property name="messageConverter" ref="invokeMessageConverter"/>  
</bean>
<!--  listener container，MDP无需实现接口 -->  
<bean id="listenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
    <property name="connectionFactory" ref="jmsConnectionFactory"/>  
    <property name="destination" ref="destination"/>  
    <property name="messageListener" ref="messageListener"/>  
</bean>  
</beans>